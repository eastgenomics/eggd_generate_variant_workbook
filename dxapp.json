{
  "name": "eggd_generate_variant_workbook",
  "title": "eggd_generate_variant_workbook",
  "summary": "Create Excel workbook from VEP annotated vcf",
  "dxapi": "1.0.0",
  "version": "2.6.0",
  "whatsNew": "* v2.0.0 Rewrite of previous app to generate xlsx file from a VEP annotated VCF(s); * v2.0.1 Bug fix to correctly treat CHROM as string values; * v2.0.2 Bug fix for ACMG report template structure; * v2.0.3 Bug fixes for issues with hyperlinks, changed app name to eggd_generate_variant_workbook; * v2.1.0 Handle VCFs from GATK gCNV and Illumina TSO500, readability tweaks to variant sheets; * v2.1.1 Bug fix for typing of numeric values in hyperlinks; * v2.2.0 Added ability to pass in non VCF files (tsvs/csvs and images) to additional sheets, optional adding of links to DECIPHER with --decipher; * v2.3.0 Added conditional colouring of cells in variant sheets, new 'basic' summary sheet;  * v2.4.0 Added handling for duplicate annotation in VEP fields (i.e. cosmic, CGC, etc..); * v2.5.0 Better parsing of CombinedVariantOutput files as additional files; * v2.6.0 Add variant counts as DNAnexus file details to the .xlsx workbook",
  "authorizedUsers": [
    "org-emee_1"
  ],
  "developers":[
    "org-emee_1"
  ],
  "inputSpec": [
    {
      "name": "vcfs",
      "label": "VEP annotated vcf(s)",
      "class": "array:file",
      "optional": false,
      "help": "",
      "group": "app"
    },
    {
      "name": "additional_files",
      "label": "additional files",
      "class": "array:file",
      "optional": true,
      "help": "additional tsv/csv file(s) to read in and add to separate sheets. Sheet names may be specified with --additional_sheet_names."
    },
    {
      "name": "images",
      "label": "images",
      "class": "array:file",
      "optional": true,
      "help": "Images to write to separate sheets. Sheet names may be specified with --image_sheet_names."
    },
    {
      "name": "image_sheet_names",
      "label": "Image sheet names",
      "class": "string",
      "optional": true,
      "help": "'Names to use for image sheets, these MUST be the same number as the number of images passed and in the same order (i.e. -iimages=graph1.png -iimages=another_image.jpeg -iimage_sheet_names='myNiceGraph someImage'). If not given, this will default image1, image2...",
      "group": "generate_workbook.py"
    },
    {
      "name": "image_sizes",
      "label": "Image sizes",
      "class": "string",
      "optional": true,
      "help": "Sizes to set for images passed with --images, formatted as colon separated width:height in px, these MUST be same number as the number of images passed and in same order (i.e. -iimages=file1 -iimages=file2 -iimage_sizes='1920:1080 1000:500')",
      "group": "generate_workbook.py"
    },
    {
      "name": "exclude_columns",
      "label": "Exclude columns",
      "class": "string",
      "optional": true,
      "help": "Columns of VCF to exclude from output xlsx",
      "group": "generate_workbook.py"
    },
    {
      "name": "include_columns",
      "label": "Include columns",
      "class": "string",
      "optional": true,
      "help": "Columns of VCF to only include in output xlsx",
      "group": "generate_workbook.py"
    },
    {
      "name": "reorder_columns",
      "label": "Reorder columns",
      "class": "string",
      "optional": true,
      "help": "Set order for columns in workbook, any not specified will be appended to the end",
      "group": "generate_workbook.py"
    },
    {
      "name": "rename_columns",
      "label": "Rename columns",
      "class": "string",
      "optional": true,
      "help": "= separated key value pairs of VCF fields to rename in output xlsx",
      "group": "generate_workbook.py"
    },
    {
      "name": "types",
      "label": "Types",
      "class": "string",
      "optional": true,
      "help": "= separated key value pairs of field=type to overwrite in VCF header (i.e CSQ_gnomADg_AF=Float)",
      "group": "generate_workbook.py"
    },
    {
      "name": "filter",
      "label": "Filter",
      "class": "string",
      "optional": true,
      "help": "Filters to apply to variants",
      "group": "generate_workbook.py"
    },
    {
      "name": "keep_filtered",
      "label": "Keep filtered",
      "class": "boolean",
      "optional": true,
      "default": true,
      "help": "Determines if to keep filtered variants in separate 'excluded' tab",
      "group": "generate_workbook.py"
    },
    {
      "name": "keep_tmp",
      "label": "Keep tmp vcfs",
      "class": "boolean",
      "default": false,
      "help": "Determines if to upload the intermediate bcftools split and filtered vcfs",
      "group": "generate_workbook.py"
    },
    {
      "name": "add_samplename_column",
      "label": "Add sample name",
      "class": "boolean",
      "optional": true,
      "default": false,
      "help": "Determines if to add samplename as first column in each sheet",
      "group": "generate_workbook.py"
    },
    {
      "name": "add_comment_column",
      "label": "Add comment column",
      "class": "boolean",
      "optional": true,
      "default": false,
      "help": "Add empty comment column to end of each sheet of variants",
      "group": "generate_workbook.py"
    },
    {
      "name": "add_classification_column",
      "label": "Add classification column",
      "class": "boolean",
      "optional": true,
      "default": false,
      "help": "Add empty classification column to end of each sheet of variants",
      "group": "generate_workbook.py"
    },
    {
      "name": "sheet_names",
      "label": "Sheet names",
      "class": "string",
      "optional": true,
      "help": "'Names to use for workbook sheets, these MUST be the same number as the number of vcfs passed and in the same order. If not given, and if there is 1 vcf passed the sheet will be named `variants`, else if multiple vcfs are passed the name prefix of the vcf will be used",
      "group": "generate_workbook.py"
    },
    {
      "name": "additional_sheet_names",
      "label": "Additional sheet names",
      "class": "string",
      "optional": true,
      "help": "Names to use for additional file sheets, if specified these MUST be the same number as the number of files passed and in the same order (e.g. `-iadditional_files=file1 -iadditional_files=file2 -iadditional_sheet_names='name_1 name_2'`). If not given, the first 31 characters of the filename will be used",
      "group": "generate_workbook.py"
    },
    {
      "name": "output_prefix",
      "label": "Output prefix",
      "class": "string",
      "optional": true,
      "help": "Prefix for naming output xlsx file",
      "group": "generate_workbook.py"
    },
    {
      "name": "freeze_column",
      "label": "freeze column",
      "class": "string",
      "optional": true,
      "help": "Optional column / row on which to freeze Excel scrolling for variant sheets (default: A2)",
      "group": "generate_workbook.py"
    },
    {
      "name": "colour_cells",
      "label": "colour cells",
      "class": "string",
      "optional": true,
      "help": "Add conditional colouring of cells for a given column, this should be specified as column:value_range:colour, where colour is a valid hex value or colour name. See readme for futher details.",
      "group": "generate_workbook.py"
    },
    {
      "name": "merge_vcfs",
      "label": "Merge",
      "class": "boolean",
      "optional": true,
      "default": false,
      "help": "Determines if to merge multiple VCFs to one sheet",
      "group": "generate_workbook.py"
    },
    {
      "name": "summary",
      "label": "Summary",
      "class": "string",
      "optional": true,
      "help": "If to include summary sheet, specify key of assay",
      "group": "generate_workbook.py"
    },
    {
      "name": "human_filter",
      "label": "Human filter",
      "class": "string",
      "optional": true,
      "help": "String to add to summary sheet with humanly readable form of the given filter string. No checking is done of this matching the actual filter(s) used.",
      "group": "generate_workbook.py"
    },
    {
      "name": "acmg",
      "label": "ACMG",
      "class": "int",
      "optional": true,
      "default": 3,
      "help": "Determines number of extra sheet(s) with ACMG reporting criteria",
      "group": "generate_workbook.py"
    },
    {
      "name": "print_columns",
      "label": "Print columns",
      "class": "boolean",
      "optional": true,
      "help": "Print all column names of all vcfs that will be output to the xlsx. Useful to identify what will be in the output to include/exclude.",
      "group": "generate_workbook.py"
    },
    {
      "name": "print_header",
      "label": "Print header",
      "class": "boolean",
      "optional": true,
      "help": "Print header of first vcf that will be output to the xlsx. Useful to identify field types in the VCF, which can be modified with --types.",
      "group": "generate_workbook.py"
    },
    {
      "name": "panel",
      "label": "String of panel information to display in summary sheet",
      "class": "string",
      "optional": true,
      "help": "",
      "group": "generate_workbook.py"
    },
    {
      "name": "clinical_indication",
      "label": "String of clinical indication to display in summary sheet",
      "class": "string",
      "optional": true,
      "help": "",
      "group": "app"
    },
    {
      "name": "additional_columns",
      "label": "additional columns",
      "class": "string",
      "optional": true,
      "help": "List of additional columns to add with hyperlinks to external resources. See readme for details.",
      "group": "app"
    },
    {
      "name": "split_hgvs",
      "label": "split hgvs",
      "class": "boolean",
      "optional" : true,
      "help": "If true, the c. and p. changes in HGVSc and HGVSp will be split out into DNA and Protein columns, without the transcript"
    },
    {
      "name": "add_raw_change",
      "label": "add raw change",
      "class": "boolean",
      "optional" : true,
      "help": "If true, will add a column named 'rawChange' with a concatenation of columns formatted as {CHROM}:g.{POS}{REF}>{ALT}"
    },
    {
      "name": "lock_sheet",
      "label": "lock_sheet",
      "class": "boolean",
      "optional" : true,
      "help": "If true, the workbook sheets are locked"
    }
  ],
  "outputSpec": [
    {
      "name": "xlsx_report",
      "label": "Excel workbook for the given vcf(s)",
      "class": "file",
      "patterns": [
        "*.xlsx"
      ],
      "help": ""
    },
    {
      "name": "tmp_vcfs",
      "label": "tmp vcfs",
      "class": "array:file",
      "optional": true,
      "help": "intermediate split and annotated vcfs, output with --keep_tmp"
    }
  ],
  "runSpec": {
    "timeoutPolicy": {
      "*": {
        "hours": 2
      }
    },
    "interpreter": "bash",
    "release": "20.04",
    "version": "0",
    "distribution": "Ubuntu",
    "file": "src/code.sh",
    "assetDepends": [
      {
        "name": "htslib",
        "project": "project-Fkb6Gkj433GVVvj73J7x8KbV",
        "folder": "/app_assets/htslib/htslib_v1.15.0",
        "version": "1.15.0"
      }
    ]
  },
  "access": {
    "project": "CONTRIBUTE",
    "allProjects": "VIEW",
    "network": [
      "*"
    ]
  },
  "regionalOptions": {
    "aws:eu-central-1": {
      "systemRequirements": {
        "*": {
          "instanceType": "mem1_ssd1_v2_x4"
        }
      }
    }
  }
}
